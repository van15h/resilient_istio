Usefull notes to deploy:

#create minikube
  minikube start -p airport --vm-driver=virtualbox --memory=16384 --cpus=4 --kubernetes-version=v1.15.7
  export INGRESS_HOST=$(minikube -p airport ip)

#start minikube new shell
  minikube start -p airport --kubernetes-version=v1.15.7
  kubectl get services -n istio-system
  kubectl get pods -n istio-system
  kubectl get pods
  cd istio-1.4.3
  export PATH=$PWD/bin:$PATH
  export INGRESS_HOST=$(minikube -p airport ip)
  export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
  echo INGRESS_HOST=$INGRESS_HOST, INGRESS_PORT=$INGRESS_PORT

#deploy istio
  curl -L https://istio.io/downloadIstio | sh -
  cd istio-1.4.3
  export PATH=$PWD/bin:$PATH
  istioctl verify-install
  kubectl label namespace default istio-injection=enabled
  # check injection enabled
    kubectl get namespace -L istio-injection
  istioctl manifest apply --set profile=demo
  kubectl get services -n istio-system
  kubectl get pods -n istio-system

#deploy app
  kubectl apply -f k8s/deployments/alerts-deploy.yaml #30001 nodeport
  # get into alerts shell
    kubectl exec -it $(kubectl get pod -l app=alerts -o jsonpath='{.items[0].metadata.name}') --stdin --tty -c alerts /bin/sh
  # check with postman GET minikube_ip:30001/status
  # check with
    curl -I http://$INGRESS_HOST:30001/status
  kubectl apply -f istio/dest_rule_alerts.yaml

#deploy gateway
  kubectl apply -f istio/ingress-gateway.yaml
  export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
  curl -I http://$INGRESS_HOST:$INGRESS_PORT/status
  # troubleshooting ports
    kubectl get svc -n istio-system
    echo INGRESS_HOST=$INGRESS_HOST, INGRESS_PORT=$INGRESS_PORT
    # Check that you have no other Istio ingress gateways defined on the same port:
    kubectl get gateway --all-namespaces
    # Check that you have no Kubernetes Ingress resources defined on the same IP and port:
    kubectl get ingress --all-namespaces

#grafana
  kubectl -n istio-system port-forward $(kubectl -n istio-system get pod -l app=grafana -o jsonpath='{.items[0].metadata.name}') 3000:3000 &
  http://localhost:3000/dashboard/db/istio-mesh-dashboard
  # Remove any kubectl port-forward processes that may be running:
    killall kubectl
  load:
    for i in {1..40}; do sleep 0.2; curl -I http://192.168.99.110:30129/status; done

#monitoring
  kubectl logs -f $(kubectl get pod -l app=alerts -o jsonpath='{.items[0].metadata.name}') -c alerts

#delete all
  k8s
    kubectl delete svc --all
    kubectl delete deployment --all
  istio
    kubectl delete VirtualService --all
    kubectl delete DestinationRule --all
    kubectl delete Gateway --all
